// <auto-generated />
using System;
using System.Text.Json;
using ApiService.Common.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApiService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251016021650_UpdateSchema")]
    partial class UpdateSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dash")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiService.Common.Database.Entities.AccountBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("amount");

                    b.Property<string>("BalanceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("balance_type");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("BRL")
                        .HasColumnName("currency");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("idx_account_balances_account");

                    b.HasIndex("BalanceType")
                        .HasDatabaseName("idx_account_balances_type");

                    b.HasIndex("AccountId", "BalanceType")
                        .IsUnique()
                        .HasDatabaseName("account_balances_account_id_balance_type_key");

                    b.ToTable("account_balances", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Document")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_clients_created_at");

                    b.HasIndex("Document")
                        .IsUnique()
                        .HasDatabaseName("clients_document_key");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_clients_email");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_clients_status");

                    b.ToTable("clients", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.ClientAssetAllocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AllocationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("allocation_type");

                    b.Property<decimal>("AllocationValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("allocation_value");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("asset_type");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("idx_allocations_active")
                        .HasFilter("end_date IS NULL");

                    b.HasIndex("AssetType", "AssetId")
                        .HasDatabaseName("idx_allocations_asset");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("idx_allocations_date_range");

                    b.HasIndex("ClientId", "AssetType", "AssetId", "EndDate")
                        .IsUnique()
                        .HasDatabaseName("client_asset_allocations_client_id_asset_type_asset_id_end_d_key");

                    b.ToTable("client_asset_allocations", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.CustodyWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BlockchainProvider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Moralis")
                        .HasColumnName("blockchain_provider");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("label");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.PrimitiveCollection<string[]>("SupportedChains")
                        .HasColumnType("text[]")
                        .HasColumnName("supported_chains");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("wallet_address");

                    b.HasKey("Id");

                    b.HasIndex("BlockchainProvider")
                        .HasDatabaseName("idx_wallets_provider");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_wallets_status");

                    b.HasIndex("WalletAddress")
                        .IsUnique()
                        .HasDatabaseName("idx_wallets_address");

                    b.ToTable("custody_wallets", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.PerformanceMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CalculationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CryptoValueUsd")
                        .HasColumnType("numeric");

                    b.Property<JsonDocument>("MetricsData")
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("ProfitLoss")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Roi")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalValueUsd")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TraditionalValueUsd")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PerformanceMetrics", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.PriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Chain")
                        .HasColumnType("text");

                    b.Property<decimal>("PriceUsd")
                        .HasColumnType("numeric");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PriceHistories", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.RebalancingAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AcknowledgedBy")
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("AlertData")
                        .HasColumnType("jsonb");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ResolvedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RebalancingAlerts", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.SystemConfiguration", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("key");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Key");

                    b.ToTable("system_configuration", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.TraditionalAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("InstitutionName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("institution_name");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("LastSyncAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sync_at");

                    b.Property<string>("OpenFinanceProvider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Pluggy")
                        .HasColumnName("open_finance_provider");

                    b.Property<string>("PluggyAccountId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pluggy_account_id");

                    b.Property<string>("PluggyItemId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pluggy_item_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("SyncErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("sync_error_message");

                    b.Property<string>("SyncStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AccountType")
                        .HasDatabaseName("idx_accounts_type");

                    b.HasIndex("PluggyAccountId")
                        .IsUnique()
                        .HasDatabaseName("idx_accounts_pluggy_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_accounts_status");

                    b.ToTable("traditional_accounts", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("Amount")
                        .HasPrecision(36, 18)
                        .HasColumnType("numeric(36,18)")
                        .HasColumnName("amount");

                    b.Property<decimal?>("AmountUsd")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_usd");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("Chain")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("chain");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("direction");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("external_id");

                    b.Property<decimal?>("Fee")
                        .HasPrecision(36, 18)
                        .HasColumnType("numeric(36,18)")
                        .HasColumnName("fee");

                    b.Property<decimal?>("FeeUsd")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("fee_usd");

                    b.Property<string>("FromAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("from_address");

                    b.Property<bool>("IsManualEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_manual_entry");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Confirmed")
                        .HasColumnName("status");

                    b.Property<string>("ToAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("to_address");

                    b.Property<string>("TokenSymbol")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("token_symbol");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionHash")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("transaction_hash");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("transaction_type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .HasDatabaseName("idx_transactions_external_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_transactions_status");

                    b.HasIndex("TransactionDate")
                        .HasDatabaseName("idx_transactions_date");

                    b.HasIndex("TransactionHash")
                        .HasDatabaseName("idx_transactions_hash");

                    b.HasIndex("TransactionType", "AssetId", "TransactionDate")
                        .HasDatabaseName("idx_transactions_asset");

                    b.ToTable("transactions", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.TransactionAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("NewData")
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("OldData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionAudits", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.WalletBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(36, 18)
                        .HasColumnType("numeric(36,18)")
                        .HasDefaultValue(0m)
                        .HasColumnName("balance");

                    b.Property<decimal?>("BalanceUsd")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("balance_usd");

                    b.Property<string>("Chain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("chain");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("TokenAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("token_address");

                    b.Property<int?>("TokenDecimals")
                        .HasColumnType("integer")
                        .HasColumnName("token_decimals");

                    b.Property<string>("TokenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("token_name");

                    b.Property<string>("TokenSymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("token_symbol");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("Chain")
                        .HasDatabaseName("idx_balances_chain");

                    b.HasIndex("LastUpdated")
                        .HasDatabaseName("idx_balances_updated");

                    b.HasIndex("TokenSymbol")
                        .HasDatabaseName("idx_balances_symbol");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("idx_balances_wallet");

                    b.HasIndex("WalletId", "Chain", "TokenAddress")
                        .IsUnique()
                        .HasDatabaseName("wallet_balances_wallet_id_chain_coalesce_key");

                    b.ToTable("wallet_balances", "dash");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.AccountBalance", b =>
                {
                    b.HasOne("ApiService.Common.Database.Entities.TraditionalAccount", "Account")
                        .WithMany("Balances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.ClientAssetAllocation", b =>
                {
                    b.HasOne("ApiService.Common.Database.Entities.Client", "Client")
                        .WithMany("AssetAllocations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.PerformanceMetric", b =>
                {
                    b.HasOne("ApiService.Common.Database.Entities.Client", "Client")
                        .WithMany("PerformanceMetrics")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.RebalancingAlert", b =>
                {
                    b.HasOne("ApiService.Common.Database.Entities.Client", "Client")
                        .WithMany("RebalancingAlerts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.TransactionAudit", b =>
                {
                    b.HasOne("ApiService.Common.Database.Entities.Transaction", "Transaction")
                        .WithMany("AuditTrail")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.WalletBalance", b =>
                {
                    b.HasOne("ApiService.Common.Database.Entities.CustodyWallet", "Wallet")
                        .WithMany("Balances")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.Client", b =>
                {
                    b.Navigation("AssetAllocations");

                    b.Navigation("PerformanceMetrics");

                    b.Navigation("RebalancingAlerts");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.CustodyWallet", b =>
                {
                    b.Navigation("Balances");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.TraditionalAccount", b =>
                {
                    b.Navigation("Balances");
                });

            modelBuilder.Entity("ApiService.Common.Database.Entities.Transaction", b =>
                {
                    b.Navigation("AuditTrail");
                });
#pragma warning restore 612, 618
        }
    }
}
